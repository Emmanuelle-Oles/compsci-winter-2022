### YamlMime:ManagedReference
items:
- uid: Budget.Expenses
  commentId: T:Budget.Expenses
  id: Expenses
  parent: Budget
  children:
  - Budget.Expenses.Add(System.DateTime,System.Int32,System.Double,System.String)
  - Budget.Expenses.Delete(System.Int32)
  - Budget.Expenses.DirName
  - Budget.Expenses.FileName
  - Budget.Expenses.List
  - Budget.Expenses.ReadFromFile(System.String)
  - Budget.Expenses.SaveToFile(System.String)
  langs:
  - csharp
  - vb
  name: Expenses
  nameWithType: Expenses
  fullName: Budget.Expenses
  type: Class
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: Expenses
    path: Expenses.cs
    startLine: 24
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nA class that holds an instance of a list of Expense objects. Also, holds the functionality of \nreading and writing to file.\n"
  example: []
  syntax:
    content: public class Expenses
    content.vb: Public Class Expenses
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Budget.Expenses.FileName
  commentId: P:Budget.Expenses.FileName
  id: FileName
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: FileName
  nameWithType: Expenses.FileName
  fullName: Budget.Expenses.FileName
  type: Property
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: FileName
    path: Expenses.cs
    startLine: 38
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nProperty that gets a file name.\n"
  example: []
  syntax:
    content: public string FileName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FileName As String
  overload: Budget.Expenses.FileName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Budget.Expenses.DirName
  commentId: P:Budget.Expenses.DirName
  id: DirName
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: DirName
  nameWithType: Expenses.DirName
  fullName: Budget.Expenses.DirName
  type: Property
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: DirName
    path: Expenses.cs
    startLine: 43
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nProperty that gets the name of directory.\n"
  example: []
  syntax:
    content: public string DirName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DirName As String
  overload: Budget.Expenses.DirName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Budget.Expenses.ReadFromFile(System.String)
  commentId: M:Budget.Expenses.ReadFromFile(System.String)
  id: ReadFromFile(System.String)
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: ReadFromFile(String)
  nameWithType: Expenses.ReadFromFile(String)
  fullName: Budget.Expenses.ReadFromFile(System.String)
  type: Method
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: ReadFromFile
    path: Expenses.cs
    startLine: 55
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nMethod populates categories from file. If the file not specified, the information is \nread and saved to a file in the AppData folder.\nMethod throws a System.IO.FileNotFoundException if file does not exist.\nMethod throws a System.Exception if file cannot be read during the XML parsing.\n"
  example: []
  syntax:
    content: public void ReadFromFile(string filepath = null)
    parameters:
    - id: filepath
      type: System.String
      description: "File path to the file that contains the budget information.\nFile path is set to null by default "
    content.vb: Public Sub ReadFromFile(filepath As String = Nothing)
  overload: Budget.Expenses.ReadFromFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Budget.Expenses.SaveToFile(System.String)
  commentId: M:Budget.Expenses.SaveToFile(System.String)
  id: SaveToFile(System.String)
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: SaveToFile(String)
  nameWithType: Expenses.SaveToFile(String)
  fullName: Budget.Expenses.SaveToFile(System.String)
  type: Method
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: SaveToFile
    path: Expenses.cs
    startLine: 105
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nMethod that saves file.\nIf the file path not specified, the information is read and saved to a file in the AppData folder.\nIf the file path does not exist, the path information is reset.\n"
  example:
  - "\n\n<pre><code></code></pre>\n\n"
  syntax:
    content: public void SaveToFile(string filepath = null)
    parameters:
    - id: filepath
      type: System.String
      description: "File path specified by user to location.\nFile path is set to null by default. "
    content.vb: Public Sub SaveToFile(filepath As String = Nothing)
  overload: Budget.Expenses.SaveToFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Budget.Expenses.Add(System.DateTime,System.Int32,System.Double,System.String)
  commentId: M:Budget.Expenses.Add(System.DateTime,System.Int32,System.Double,System.String)
  id: Add(System.DateTime,System.Int32,System.Double,System.String)
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: Add(DateTime, Int32, Double, String)
  nameWithType: Expenses.Add(DateTime, Int32, Double, String)
  fullName: Budget.Expenses.Add(System.DateTime, System.Int32, System.Double, System.String)
  type: Method
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: Add
    path: Expenses.cs
    startLine: 176
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nMethod receives specified date, category, amount and description of an\nexpense sets the id of the expense and adds it to the list of expenses.\nThis method also assign the id to the expense. \n\n"
  example:
  - "\n\n<pre><code>Expenses expenses = new Expenses();\nexpenses.Add(DateTime.Now, (int)Category.CategoryType.Expense,\n           22.22, &quot;transportation&quot;);</code></pre>\n\n"
  syntax:
    content: public void Add(DateTime date, int category, double amount, string description)
    parameters:
    - id: date
      type: System.DateTime
      description: 'Date and time of the expense. '
    - id: category
      type: System.Int32
      description: 'Numerical representation of the category of the expense. '
    - id: amount
      type: System.Double
      description: 'The monetary value of the expense. '
    - id: description
      type: System.String
      description: 'The description of the expense. '
    content.vb: Public Sub Add(date As Date, category As Integer, amount As Double, description As String)
  overload: Budget.Expenses.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Budget.Expenses.Delete(System.Int32)
  commentId: M:Budget.Expenses.Delete(System.Int32)
  id: Delete(System.Int32)
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: Delete(Int32)
  nameWithType: Expenses.Delete(Int32)
  fullName: Budget.Expenses.Delete(System.Int32)
  type: Method
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: Delete
    path: Expenses.cs
    startLine: 205
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nMethods receives specified id of an expense retrieves the index of the\nexpense from the list and removes the expense at that index. \n"
  example:
  - "\n\n<pre><code></code></pre>\n\n"
  syntax:
    content: public void Delete(int Id)
    parameters:
    - id: Id
      type: System.Int32
      description: 'Numerical representation of the expense. '
    content.vb: Public Sub Delete(Id As Integer)
  overload: Budget.Expenses.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Budget.Expenses.List
  commentId: M:Budget.Expenses.List
  id: List
  parent: Budget.Expenses
  langs:
  - csharp
  - vb
  name: List()
  nameWithType: Expenses.List()
  fullName: Budget.Expenses.List()
  type: Method
  source:
    remote:
      path: Application_Development/week_1/HomeBugetOleszczuk_W2022/HomeBugetOleszczuk_W2022/Expenses.cs
      branch: main
      repo: https://github.com/Emmanuelle-Oles/compsci-winter-2022.git
    id: List
    path: Expenses.cs
    startLine: 234
  assemblies:
  - HomeBugetOleszczuk_W2022
  namespace: Budget
  summary: "\nMethod instantiates a list of expenses to allow to make a\ncopy of the list of the current instance of expenses. Using a\nfor-each loop the current expense items are added to the new\nexpense list.\n"
  example:
  - "\n\n<pre><code>Expenses expenses = new Expenses();\nexpenses.Add(DateTime.Now, (int) Category.CategoryType.Expense, 23.45, &quot;textbook&quot; );\n\nList&lt;Expense> list = expenses.List();\nforeach (Expense expense in list)\n    Console.WriteLine(expense.Description);</code></pre>\n\n"
  syntax:
    content: public List<Expense> List()
    return:
      type: System.Collections.Generic.List{Budget.Expense}
      description: 'Returns a copied list of expenses. '
    content.vb: Public Function List As List(Of Expense)
  overload: Budget.Expenses.List*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Budget
  commentId: N:Budget
  name: Budget
  nameWithType: Budget
  fullName: Budget
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Budget.Expenses.FileName*
  commentId: Overload:Budget.Expenses.FileName
  name: FileName
  nameWithType: Expenses.FileName
  fullName: Budget.Expenses.FileName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Budget.Expenses.DirName*
  commentId: Overload:Budget.Expenses.DirName
  name: DirName
  nameWithType: Expenses.DirName
  fullName: Budget.Expenses.DirName
- uid: Budget.Expenses.ReadFromFile*
  commentId: Overload:Budget.Expenses.ReadFromFile
  name: ReadFromFile
  nameWithType: Expenses.ReadFromFile
  fullName: Budget.Expenses.ReadFromFile
- uid: Budget.Expenses.SaveToFile*
  commentId: Overload:Budget.Expenses.SaveToFile
  name: SaveToFile
  nameWithType: Expenses.SaveToFile
  fullName: Budget.Expenses.SaveToFile
- uid: Budget.Expenses.Add*
  commentId: Overload:Budget.Expenses.Add
  name: Add
  nameWithType: Expenses.Add
  fullName: Budget.Expenses.Add
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Budget.Expenses.Delete*
  commentId: Overload:Budget.Expenses.Delete
  name: Delete
  nameWithType: Expenses.Delete
  fullName: Budget.Expenses.Delete
- uid: Budget.Expenses.List*
  commentId: Overload:Budget.Expenses.List
  name: List
  nameWithType: Expenses.List
  fullName: Budget.Expenses.List
- uid: System.Collections.Generic.List{Budget.Expense}
  commentId: T:System.Collections.Generic.List{Budget.Expense}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Expense>
  nameWithType: List<Expense>
  fullName: System.Collections.Generic.List<Budget.Expense>
  nameWithType.vb: List(Of Expense)
  fullName.vb: System.Collections.Generic.List(Of Budget.Expense)
  name.vb: List(Of Expense)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Budget.Expense
    name: Expense
    nameWithType: Expense
    fullName: Budget.Expense
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Budget.Expense
    name: Expense
    nameWithType: Expense
    fullName: Budget.Expense
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
